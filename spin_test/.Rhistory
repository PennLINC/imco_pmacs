proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
#storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
#print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
rh_spinxyeo[1]
rh_spinxyeo[2]
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
# print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", yeo_num, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
#storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
#print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
253/(1630-89)
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", yeo_num, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
#storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
#print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", yeo_num, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
#storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
#print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
301/(1630-89)
#multiply yeo network x spin test
lh_spinxyeo <- lh_act_results_and_spin*lh_yeo_network
rh_spinxyeo <- rh_act_results_and_spin*rh_yeo_network
#proportions
#go through each hemisphere, go through each perm, and go through each network
lh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
rh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", yeo_num, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
#eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
lh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
rh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
warnings()
rh_hemi_spin_proportions
lh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
rh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = (permNum + 1))
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
warnings()
rh_hemi_spin_proportions[7][3] = 0.195327709279689
rh_hemi_spin_proportions[7][3] = 1
rh_hemi_spin_proportions[7][3] <- 1
rh_hemi_spin_proportions[7][1] <- 1
num_matrix_column <- permNum + 1
lh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = num_matrix_column)
rh_hemi_spin_proportions <- matrix(nrow = yeo_num, ncol = num_matrix_column)
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
rh_hemi_spin_proportions
num_matrix_column
lh_hemi_spin_proportions <- data.frame(nrow = yeo_num, ncol = (permNum + 1))
rh_hemi_spin_proportions <- data.frame(nrow = yeo_num, ncol = (permNum + 1))
dim(lh_hemi_spin_proportions)
lh_hemi_spin_proportions
lh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
rh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
#
lh_hemi_spin_proportions
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
for (perm in 1:dim(lh_hemi_spin_proportions)[2])) {
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
rh_hemi_spin_proportions[4]
rh_hemi_spin_proportions[3]
rh_hemi_spin_proportions[3,1]
rh_hemi_spin_proportions
for (perm in 1:dim(lh_hemi_spin_proportions)[2]){
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, "][", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
rh_hemi_spin_proportions[4,]
rh_hemi_spin_proportions[4,2]
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:dim(lh_hemi_spin_proportions)[2]){
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, ",", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
lh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
rh_hemi_spin_proportions <- data.frame(matrix(nrow = yeo_num, ncol = (permNum + 1)))
#for (hemi in hemis){
# print(paste0("hemi", hemi))
for (perm in 1:(permNum + 1)){
print(paste0("perm: ", perm))
for (network in 1:yeo_num){
print(paste0("network: ", network))
#to evaluate
#number of vertices within network that are fdr corrected
num_pos_to_parse<- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == ", network, "))")
print(num_pos_to_parse)
num_vertices_in_spin <- eval(parse(text = as.character(num_pos_to_parse)))
print(paste0("num vertices in spin", num_vertices_in_spin))
#number of vertices within network that are negative (i.e., medial wall)
num_neg_to_parse <- paste0("length(which(", hemi, "_spinxyeo[", perm, "] == -", network, "))")
print(num_neg_to_parse)
num_neg <- eval(parse(text = as.character(num_neg_to_parse)))
print(paste0("num neg: ", num_neg))
#total number of vertices in normal network
total_possible_to_parse <- paste0(hemi, "_yeo_network_count_table[", network, "]")
print(total_possible_to_parse)
total_possible <- eval(parse(text = as.character(total_possible_to_parse)))
print(paste0("total possible:", total_possible))
#proportion of vertices within network , with denominator being total possible by # in medial wall
proportion_potential_vertices <- num_vertices_in_spin/(total_possible - num_neg)
print(paste0("prop:", proportion_potential_vertices))
#store in matrix
storing_to_parse <- paste0(hemi, "_hemi_spin_proportions[", network, ",", perm, "] = ", proportion_potential_vertices)
print(storing_to_parse)
eval(parse(text = as.character(storing_to_parse)))
#}
}
}
#write.table(lh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/lh_spin_test_proportions.csv"), col.names = F, row.names = F)
#write.table(rh_hemi_spin_proportions, file = paste0(homedir, "/baller/results/coupling_accuracy//spin_test_results/rh_spin_test_proportions.csv"), col.names = F, row.names = F)
#then plot
rh_hemi_spin_proportions
library(ggplot2)
library(tidyr)
